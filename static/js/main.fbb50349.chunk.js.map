{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","totalCounters","className","href","Counter","handleChange","event","newInput","target","value","props","onChanges","counter","handleSubmitting","a","onSubmit","prevProps","prevState","this","console","log","type","onChange","bind","onClick","onDelete","id","children","classes","Component","Counters","onReset","counters","onIncrement","onAdd","align","map","key","output","App","state","data","geocode","location","axios","get","params","address","response","formattedAddress","results","formatted_address","lat","geometry","lng","timezone","latitude","longitude","formattedTime","formatted","index","indexOf","setState","handleInput","handleSubmit","handleDelete","counterId","filter","c","handleReset","handleAdd","lastId","length","newCounters","concat","Fragment","handleIncrement","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fbb50349.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// Since NavBar is a Stateless Functional Component\n// we need to pass props unlike class where we can \n// use this.props (here destrutured to use totalCounters)\nconst NavBar = ({ totalCounters }) => {\n    return ( \n        <nav className=\"navbar navbar-dark bg-dark \">\n            <a className=\"navbar-brand m-auto\" href=\"#\">\n                TimeZone{\" \"}\n        {/* TimeZone{\" \"}\n            <span className=\"badge badge-pill badge-secondary\">\n                {totalCounters}\n            </span> */}\n        </a>\n      </nav>\n    );\n};\n \nexport default NavBar;","import React, { Component } from 'react';\n// import { string }from 'prop-types';\n\n\nclass Counter extends Component {\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.counter.value !== this.props.counter.value) {\n            // Ajax call and get new data from the server \n        }\n    }\n\n    componentWillUnmount() {\n        console.log('Counter - Unmount');\n    }\n\n\n    handleChange = (event) => {\n        \n        var newInput = event.target.value;\n        this.props.onChanges(this.props.counter, newInput);\n    }\n\n    handleSubmitting = async () => {\n\n        await this.props.onSubmit(this.props.counter);\n    }\n\n    render() {\n        // console.log('props', this.props)\n        return (\n        <div>\n            <input type=\"text\" onChange={ this.handleChange.bind(this) }/>\n            <button type=\"submit\" className=\"btn btn-primary m-2\" onClick={ this.handleSubmitting }>Submit</button> \n            <button onClick={() => this.props.onDelete(this.props.counter.id)}\n             className=\"btn btn-danger m-2\">Delete</button>\n            {this.props.children}          {/* children prop is used to pass complex elements to the children*/}\n        </div>\n        );\n    }\n\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += (this.props.counter.value === 0) ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n    formatCount() {\n        const { value } = this.props.counter;\n        return value ===  0 ? 'Zero' : value;\n\n    }\n}\n \nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './counter';\n\nclass Counters extends Component {\n    render() { \n        const { onReset, counters, onDelete, onIncrement, onChanges, onSubmit, onAdd} = this.props;\n\n        return (\n        <div align = \"center\">\n            {/* Reset Button*/}\n            <button\n                onClick={onReset}\n                className=\"btn btn-outline-dark m-3\">\n                Reset\n            </button>\n            <button \n                onClick={onAdd}\n                className=\"btn btn-outline-dark m-3\">\n                Add\n            </button>\n            {counters.map(counter => (\n            <Counter \n                key={counter.id} \n                onDelete={onDelete} \n                onIncrement={onIncrement}\n                onChanges={onChanges}\n                onSubmit={onSubmit}\n                counter={counter}\n            >\n            <h6>Date & Time: {counter.output}</h6>\n            </Counter>\n            ))}\n\n        </div>);\n    }\n}\n \nexport default Counters;","import React, { Component } from 'react';\nimport axios from 'axios';\n// import logo from './logo.svg';\nimport NavBar from './components/navbar'\nimport Counters from './components/counters';\nimport './App.css';\n\nclass App extends Component {\n\n  state = { \n    counters: [\n        { id: 1, data: '', output: ''},\n        { id: 2, data: '', output: ''},\n        { id: 3, data: '', output: ''},\n        { id: 4, data: '', output: ''}\n    ],\n  };\n\n  // you can set a state directly in a constructor\n  constructor(props) {\n    super(props);\n    console.log('App-constructor');\n  }\n\n  geocode = async (location, counter) => {\n    try {\n      let response = await axios.get('https://maps.googleapis.com/maps/api/geocode/json?',{\n          params:{\n              address: location,\n              key: 'AIzaSyA4w6NRc7DjmfJCoxO0TQ8Sdu-E_DDQ-X4'\n          }\n      });\n    console.log(\"GEOCODE\", response);\n    // Formatted Address\n    var formattedAddress = response.data.results[0].formatted_address;\n    console.log(formattedAddress);\n    // Geometry\n    var lat = response.data.results[0].geometry.location.lat;\n    var lng = response.data.results[0].geometry.location.lng;\n    console.log(\"lat:\", lat)\n    console.log('long:', lng)\n    this.timezone(lat, lng, counter);\n\n    } catch(e){\n        console.log(\"geocoding api: \", e);\n    }\n} \n\n  timezone = async (latitude, longitude, counter) => {\n    // for testing\n    // var latitude = 43.653226;\n    // var longitude = -79.3831843;\n\n    try {\n      let response = await axios.get('https://api.timezonedb.com/v2.1/get-time-zone?key=11DHLME82RAS&format=json&by=position&',{\n        params:{\n            lat: latitude,\n            lng: longitude\n        }\n      });\n\n      console.log(\"RESPONSE\", response);\n        // get the current time of input\n      var formattedTime = response.data.formatted;\n      console.log(formattedTime);\n\n      // updating and displaying output of state to the time recieved from APIs\n      const counters = [...this.state.counters];\n      const index = counters.indexOf(counter);\n      counters[index].output = formattedTime;\n      this.setState({ counters }); \n\n    } catch(e) {\n      console.log(\"timezone api:\",e);\n    }\n  }\n\n  handleInput = (counter, newInput) => {\n    const counters = [...this.state.counters];       //cloning the array\n    const index = counters.indexOf(counter);\n    counters[index].data = newInput;\n    this.setState({ counters }); \n    console.log(\"handleInput\", counters);\n  }\n\n  handleSubmit = async (counter) => {\n      console.log('submit', this);\n      const counters = [...this.state.counters];\n      const index = counters.indexOf(counter);\n      await this.geocode(counters[index].data, counter);\n    }\n\n    // delete the counter \n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters })\n  }\n  // TODO: reset should clear the input box\n  handleReset = () =>{\n      const counters = this.state.counters.map(c => {\n          c.data = '';\n          c.output='';\n          return c;\n      });\n      this.setState({ counters });\n  };\n\n  // on clicking Add button, a new counter should be added\n  handleAdd = () =>{\n    const counters = [...this.state.counters];\n    // find id of the last counter and assign new counter with last id+1\n    var lastCounter = counters.length - 1;\n    var lastId = counters[lastCounter].id;\n    const newCounters = counters.concat({ id: lastId + 1, data: '', output: '' });\n    this.setState({ counters: newCounters });\n  }\n\n  render() {\n    console.log('App - rendered')\n\n    return (\n      <React.Fragment>\n      <NavBar totalCounters={this.state.counters.filter(c => c.value > 0).length}/>\n      <main className=\"container\">\n        <Counters \n        counters={ this.state.counters}\n        onReset={this.handleReset}\n        onIncrement={this.handleIncrement}\n        onDelete={this.handleDelete}\n        onChanges={this.handleInput}\n        onSubmit={this.handleSubmit}\n        onAdd={this.handleAdd}\n        />\n      </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}